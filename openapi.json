{
    "openapi": "3.0.2",
    "info": {
        "title": "Wallet-Pay API Documentations",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://api.wallet-pay.openweb3.io"
        }
    ],
    "security": [
        {
            "ApiKeyAuth": []
        }
    ],
    "x-readme": {
        "samples-languages": [
            "python",
            "node",
            "csharp",
            "java",
            "go",
            "kotlin",
            "ruby",
            "rust",
            "java",
            "shell"
        ],
        "parameter-ordering": [
            "path", 
            "query", 
            "header", 
            "cookie", 
            "body", 
            "form"
        ]
    },
    "paths":
      {
        "/api/v1/apps/{appId}/orders": {
            "get": {
                "description": "List orders.",
                "operationId": "v1.order.list",
                "parameters": [
                    {
                        "description": "Specified the app id.",
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "schema": {
                            "description": "Specified the app id.",
                            "example": "app_12345xsfei",
                            "type": "string"
                        },
                        "style": "simple"
                    },
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "size",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "minimum": 0,
                            "default": 20,
                            "example": 100,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Specifying the page index",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "description": "Specifying the page index",
                            "example": 0,
                            "default": 0,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Optional wallet id",
                        "in": "query",
                        "name": "wallet_id",
                        "schema": {
                            "description": "Optional wallet id",
                            "example": "wallet_id",
                            "type": "string",
                            "nullable": true
                        },
                        "style": "form"
                    },
                    {
                        "description": "Optional account id",
                        "in": "query",
                        "name": "account_id",
                        "schema": {
                            "description": "Optional account id",
                            "example": "account_id",
                            "type": "string",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_OrderOut_"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "List Orders",
                "tags": [
                    "Order"
                ]
            },
            "post": {
                "description": "Create a new order.",
                "operationId": "v1.order.create",
                "parameters": [
                    {
                        "description": "Specified the app id.",
                        "in": "path",
                        "name": "appId",
                        "required": true,
                        "schema": {
                            "description": "Specified the app id.",
                            "example": "app_12345xsfei",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/OrderIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderOut"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrderOut"
                                }
                            }
                        },
                        "description": "OK"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Create Order",
                "tags": [
                    "Order"
                ],
                "x-readme": {
                    "code-samples": []
                }
            }
        },
        "/api/v1/webhooks/endpoints" : {
            "get": {
                "description": "List endpoints.",
                "operationId": "v1.endpoint.list",
                "parameters": [
                    {
                        "description": "Limit the number of returned items",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "description": "Limit the number of returned items",
                            "format": "uint64",
                            "minimum": 0,
                            "default": 20,
                            "example": 100,
                            "type": "integer"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Specifying the start cursor position",
                        "in": "query",
                        "name": "cursor",
                        "schema": {
                            "description": "Specifying the start cursor position",
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The sorting order of the returned items",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "$ref": "#/components/schemas/Ordering",
                            "description": "The sorting order of the returned items",
                            "nullable": true
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ListResponse_EndpointOut_"
                                }
                            }
                        },
                        "description": ""
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "List endpoints",
                "tags": [
                    "Webhook Endpoint"
                ]
            },
            "post": {
                "description": "Create a webhook endpoint.",
                "operationId": "v1.endpoint.create",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EndpointIn"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Bad request"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Create endpoint",
                "tags": [
                    "Webhook Endpoint"
                ],
                "x-readme": {
                    "code-samples": []
                }
            }
        },
        "/api/v1/webhooks/endpoints/{endpointId}": {          
            "delete": {
                "description": "delete the specified webhook endpoint.",
                "operationId": "v1.endpoint.delete",
                "parameters": [
                    {
                        "description": "Specified the endpoint id.",
                        "in": "path",
                        "name": "endpointId",
                        "required": true,
                        "schema": {
                            "description": "Specified the endpoint id.",
                            "example": "wb_12345xsfei",
                            "type": "string"
                        },
                        "style": "simple"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EndpointOut"
                                }
                            }
                        },
                        "description": ""
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Unauthorized"
                    },
                    "403": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Forbidden"
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Not Found"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Conflict"
                    },
                    "429": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HttpErrorOut"
                                }
                            }
                        },
                        "description": "Too Many Requests"
                    }
                },
                "summary": "Delete endpoint",
                "tags": [
                    "Webhook Endpoint"
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "HttpErrorOut": {
                "properties": {
                    "msg": {
                        "type": "string"
                    },
                    "code": {
                        "type": "integer",
                        "nullable": true
                    }
                },
                "required": [
                    "msg"
                ],
                "title": "HttpError",
                "type": "object"
            },
            "Ordering": {
                "description": "Defines the ordering in a listing of results.",
                "enum": [
                    "asc",
                    "desc"
                ],
                "type": "string"
            },
            "OrderIn": {
                "properties": {
                    "uid": {
                        "description": "Optional unique identifier for the order",
                        "example": "unique-order-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "currency": {
                        "description": "Currency code",
                        "example": "USDT",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "amount": {
                        "description": "Big decimal string representation. Note that the max precision (number of digits after decimal point) depends on the currencyCode. E.g. for all fiat currencies is 2 (0.01), for BTC is 8, for USDT is 6. There's also min order amount for creating an order. It's 0.000001 BTC / 0.01 USDT / 0.01 USD / 0.01 EUR / 0.1 RUB.",
                        "example": "0.0012345",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "note": {
                        "description": "Optional order note",
                        "example": "note example",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object",
                        "nullable": true,
                        "description": "Optional metadata"
                    },
                    "expiration": {
                        "description": "The expiration seconds",
                        "example": "600",
                        "type": "integer"
                    }
                },
                "required": [
                    "currency",
                    "amount"
                ],
                "type": "object"
            },
            "OrderOut": {
                "properties": {
                    "id": {
                        "description": "The order's ID",
                        "example": "1brOrx2ZWZBpBUvZwXKQmoEYga2",
                        "type": "string"
                    },
                    "uid": {
                        "description": "The order's UID",
                        "example": "unique-order-identifier",
                        "maxLength": 256,
                        "minLength": 1,
                        "nullable": true,
                        "pattern": "^[a-zA-Z0-9\\-_.]+$",
                        "type": "string"
                    },
                    "currency": {
                        "description": "Currency code",
                        "example": "USDT",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "amount": {
                        "description": "Big decimal string representation. Note that the max precision (number of digits after decimal point) depends on the currencyCode. E.g. for all fiat currencies is 2 (0.01), for BTC is 8, for USDT is 6. There's also min order amount for creating an order. It's 0.000001 BTC / 0.01 USDT / 0.01 USD / 0.01 EUR / 0.1 RUB.",
                        "example": "1",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "user_id": {
                        "type": "string",
                        "description": "The order's creator",
                        "nullable": true
                    },
                    "wallet_id": {
                        "description": "wallet id",
                        "example": "wallet_id",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "note": {
                        "description": "Optional order notes",
                        "example": "note example",
                        "maxLength": 256,
                        "minLength": 1,
                        "type": "string"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    },
                    "expiration": {
                        "description": "The expiration seconds",
                        "example": "600",
                        "type": "integer"
                    },
                    "status": {
                        "type": "string",
                        "enum": ["PENDING", "PAID", "FAILED", "EXPIRED", "COMPLETED"],
                        "description": "The order's status"
                    },
                    "failed_message": {
                        "type": "string",
                        "description": "The message when order failed"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The order's creation time"
                    },
                    "payed_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The order's paid time"
                    },
                    "expired_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The order's expiration time"
                    },
                    "failed_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The order's failure time"
                    }
                },
                "required": [
                    "id",
                    "currency",
                    "amount",
                    "status",
                    "createdAt"
                ],
                "type": "object"
            },
            "ListResponse_OrderOut_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/OrderOut"
                        },
                        "type": "array"
                    },
                    "total": {
                        "type": "integer"
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object"
            },
            "EndpointIn": {
                "properties": {
                    "filter_types": {
                        "description": "The webhook endpoint expected event types",
                        "example": [
                            "tx.created"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "url": {
                        "description": "The webhook endpoint url",
                        "example": "http://example.com/endpoint",
                        "type": "string"
                    },
                    "disabled":{
                        "description": "indicate whether to disable the webhook endpoint",
                        "example": "false",
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object",
                        "nullable": true,
                        "description": "Optional metadata",
                        "example": {
                            "node": "http://dashboard.com/node1",
                            "tag": "node"
                        }
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object",
                        "nullable": true,
                        "description": "Optional headers",
                        "example": {
                            "x-user-id": "user1",
                            "x-org-id": "org_xdwfeees1xfeg"
                        }
                    },
                    "description": {
                        "description": "The endpoint's description",
                        "example": "The description for endpoint",
                        "type": "string"
                    }
                },
                "required": [
                    "url",
                    "filter_types"
                ],
                "type": "object"
            },
            "EndpointOut": {
                "properties": {
                    "description": {
                        "description": "The endpoint's description",
                        "example": "The description for endpoint",
                        "type": "string"
                    },
                    "url": {
                        "description": "The webhook endpoint url",
                        "example": "http://example.com/endpoint",
                        "type": "string"
                    },
                    "filter_types": {
                        "description": "The webhook endpoint expected event types",
                        "example": [
                            "tx.created"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "disabled":{
                        "description": "indicate whether to disable the webhook endpoint",
                        "example": "false",
                        "type": "boolean"
                    },
                    "metadata": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object",
                        "description": "Optional metadata",
                        "example": {
                            "node": "http://dashboard.com/node1",
                            "tag": "node"
                        }
                    },
                    "headers": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "default": {},
                        "type": "object",
                        "description": "Optional headers",
                        "example": {
                            "x-user-id": "user1",
                            "x-org-id": "org_xdwfeees1xfeg"
                        }
                    }
                },
                "required": [
                    "url",
                    "filter_types"
                ],
                "type": "object"
            },
            "ListResponse_EndpointOut_": {
                "properties": {
                    "items": {
                        "items": {
                            "$ref": "#/components/schemas/EndpointOut"
                        },
                        "type": "array"
                    },
                    "prev_cursor": {
                        "type": "string"
                    },
                    "next_cursor": {
                        "type": "string"
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "ApiKeyAuth": {
                "type": "apiKey",
                "in": "header",
                "name": "x-api-key"
            }
        }
    }
}
