/*
 * WalletPay API Documentation
 * This is a custody wallet pay service openapi server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.walletpay.internal.api;

import io.openweb3.walletpay.internal.ApiCallback;
import io.openweb3.walletpay.internal.ApiClient;
import io.openweb3.walletpay.internal.ApiException;
import io.openweb3.walletpay.internal.ApiResponse;
import io.openweb3.walletpay.internal.Configuration;
import io.openweb3.walletpay.internal.Pair;
import io.openweb3.walletpay.internal.ProgressRequestBody;
import io.openweb3.walletpay.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.walletpay.models.Error;
import io.openweb3.walletpay.models.EstimateResponse;
import io.openweb3.walletpay.models.GetRatesRequest;
import io.openweb3.walletpay.models.GetRatesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RatesApi {
    private ApiClient localVarApiClient;

    public RatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1RatesEstimate
     * @param baseCurrency Source currency code (required)
     * @param baseAmount Amount in source currency to convert (required)
     * @param toCurrency Target currency code (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RatesEstimateCall(String baseCurrency, String baseAmount, String toCurrency, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rates/estimate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baseCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_currency", baseCurrency));
        }

        if (baseAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_amount", baseAmount));
        }

        if (toCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_currency", toCurrency));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1RatesEstimateValidateBeforeCall(String baseCurrency, String baseAmount, String toCurrency, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'baseCurrency' is set
        if (baseCurrency == null) {
            throw new ApiException("Missing the required parameter 'baseCurrency' when calling v1RatesEstimate(Async)");
        }
        
        // verify the required parameter 'baseAmount' is set
        if (baseAmount == null) {
            throw new ApiException("Missing the required parameter 'baseAmount' when calling v1RatesEstimate(Async)");
        }
        
        // verify the required parameter 'toCurrency' is set
        if (toCurrency == null) {
            throw new ApiException("Missing the required parameter 'toCurrency' when calling v1RatesEstimate(Async)");
        }
        

        okhttp3.Call localVarCall = v1RatesEstimateCall(baseCurrency, baseAmount, toCurrency, _callback);
        return localVarCall;

    }

    /**
     * Estimate currency conversion
     * Convert an amount from one currency to another using current exchange rates.
     * @param baseCurrency Source currency code (required)
     * @param baseAmount Amount in source currency to convert (required)
     * @param toCurrency Target currency code (required)
     * @return EstimateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public EstimateResponse v1RatesEstimate(String baseCurrency, String baseAmount, String toCurrency) throws ApiException {
        ApiResponse<EstimateResponse> localVarResp = v1RatesEstimateWithHttpInfo(baseCurrency, baseAmount, toCurrency);
        return localVarResp.getData();
    }

    /**
     * Estimate currency conversion
     * Convert an amount from one currency to another using current exchange rates.
     * @param baseCurrency Source currency code (required)
     * @param baseAmount Amount in source currency to convert (required)
     * @param toCurrency Target currency code (required)
     * @return ApiResponse&lt;EstimateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EstimateResponse> v1RatesEstimateWithHttpInfo(String baseCurrency, String baseAmount, String toCurrency) throws ApiException {
        okhttp3.Call localVarCall = v1RatesEstimateValidateBeforeCall(baseCurrency, baseAmount, toCurrency, null);
        Type localVarReturnType = new TypeToken<EstimateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Estimate currency conversion (asynchronously)
     * Convert an amount from one currency to another using current exchange rates.
     * @param baseCurrency Source currency code (required)
     * @param baseAmount Amount in source currency to convert (required)
     * @param toCurrency Target currency code (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RatesEstimateAsync(String baseCurrency, String baseAmount, String toCurrency, final ApiCallback<EstimateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1RatesEstimateValidateBeforeCall(baseCurrency, baseAmount, toCurrency, _callback);
        Type localVarReturnType = new TypeToken<EstimateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1RatesList
     * @param getRatesRequest Currency pairs to get rates for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RatesListCall(GetRatesRequest getRatesRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getRatesRequest;

        // create path and map variables
        String localVarPath = "/api/v1/rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1RatesListValidateBeforeCall(GetRatesRequest getRatesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getRatesRequest' is set
        if (getRatesRequest == null) {
            throw new ApiException("Missing the required parameter 'getRatesRequest' when calling v1RatesList(Async)");
        }
        

        okhttp3.Call localVarCall = v1RatesListCall(getRatesRequest, _callback);
        return localVarCall;

    }

    /**
     * List exchange rates
     * Get exchange rates for multiple currency pairs.
     * @param getRatesRequest Currency pairs to get rates for (required)
     * @return GetRatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public GetRatesResponse v1RatesList(GetRatesRequest getRatesRequest) throws ApiException {
        ApiResponse<GetRatesResponse> localVarResp = v1RatesListWithHttpInfo(getRatesRequest);
        return localVarResp.getData();
    }

    /**
     * List exchange rates
     * Get exchange rates for multiple currency pairs.
     * @param getRatesRequest Currency pairs to get rates for (required)
     * @return ApiResponse&lt;GetRatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRatesResponse> v1RatesListWithHttpInfo(GetRatesRequest getRatesRequest) throws ApiException {
        okhttp3.Call localVarCall = v1RatesListValidateBeforeCall(getRatesRequest, null);
        Type localVarReturnType = new TypeToken<GetRatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List exchange rates (asynchronously)
     * Get exchange rates for multiple currency pairs.
     * @param getRatesRequest Currency pairs to get rates for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RatesListAsync(GetRatesRequest getRatesRequest, final ApiCallback<GetRatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1RatesListValidateBeforeCall(getRatesRequest, _callback);
        Type localVarReturnType = new TypeToken<GetRatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
