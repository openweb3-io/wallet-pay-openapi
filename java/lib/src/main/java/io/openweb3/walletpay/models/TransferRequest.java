/*
 * WalletPay API Documentation
 * This is a custody wallet pay service openapi server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.walletpay.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TransferRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransferRequest {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_AUTO_COMMIT = "auto_commit";
  @SerializedName(SERIALIZED_NAME_AUTO_COMMIT)
  private Boolean autoCommit;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_TO_WALLET_ID = "to_wallet_id";
  @SerializedName(SERIALIZED_NAME_TO_WALLET_ID)
  private String toWalletId;


  public TransferRequest amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount to transfer, supports decimal values
   * @return amount
  **/
  @ApiModelProperty(required = true, value = "Amount to transfer, supports decimal values")

  public String getAmount() {
    return amount;
  }


  public void setAmount(String amount) {
    this.amount = amount;
  }


  public TransferRequest autoCommit(Boolean autoCommit) {
    
    this.autoCommit = autoCommit;
    return this;
  }

   /**
   * Whether to automatically commit the transfer
   * @return autoCommit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether to automatically commit the transfer")

  public Boolean getAutoCommit() {
    return autoCommit;
  }


  public void setAutoCommit(Boolean autoCommit) {
    this.autoCommit = autoCommit;
  }


  public TransferRequest currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Currency code for the transfer (e.g., TON, USDT, ETH)
   * @return currency
  **/
  @ApiModelProperty(required = true, value = "Currency code for the transfer (e.g., TON, USDT, ETH)")

  public String getCurrency() {
    return currency;
  }


  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public TransferRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Optional description for the transfer
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional description for the transfer")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public TransferRequest tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public TransferRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Optional tags for categorizing the transfer
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional tags for categorizing the transfer")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public TransferRequest toWalletId(String toWalletId) {
    
    this.toWalletId = toWalletId;
    return this;
  }

   /**
   * Destination wallet ID to transfer funds to
   * @return toWalletId
  **/
  @ApiModelProperty(required = true, value = "Destination wallet ID to transfer funds to")

  public String getToWalletId() {
    return toWalletId;
  }


  public void setToWalletId(String toWalletId) {
    this.toWalletId = toWalletId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferRequest transferRequest = (TransferRequest) o;
    return Objects.equals(this.amount, transferRequest.amount) &&
        Objects.equals(this.autoCommit, transferRequest.autoCommit) &&
        Objects.equals(this.currency, transferRequest.currency) &&
        Objects.equals(this.description, transferRequest.description) &&
        Objects.equals(this.tags, transferRequest.tags) &&
        Objects.equals(this.toWalletId, transferRequest.toWalletId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, autoCommit, currency, description, tags, toWalletId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferRequest {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    autoCommit: ").append(toIndentedString(autoCommit)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    toWalletId: ").append(toIndentedString(toWalletId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

