/*
 * Wallet-Pay API Documentations
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.walletpay.internal.api;

import io.openweb3.walletpay.internal.ApiCallback;
import io.openweb3.walletpay.internal.ApiClient;
import io.openweb3.walletpay.internal.ApiException;
import io.openweb3.walletpay.internal.ApiResponse;
import io.openweb3.walletpay.internal.Configuration;
import io.openweb3.walletpay.internal.Pair;
import io.openweb3.walletpay.internal.ProgressRequestBody;
import io.openweb3.walletpay.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.walletpay.models.GetRatesIn;
import io.openweb3.walletpay.models.ResponseError;
import io.openweb3.walletpay.models.ResponseEstimateOut;
import io.openweb3.walletpay.models.ResponseRatesOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RateApi {
    private ApiClient localVarApiClient;

    public RateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1RateEstimate
     * @param baseCurrency Specified the base currency that needs to be estimated (required)
     * @param toCurrency Specify the target currency. (required)
     * @param baseAmount Specify the amount of base currency that need to be estimated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RateEstimateCall(String baseCurrency, String toCurrency, String baseAmount, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/rates/estimate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baseCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_currency", baseCurrency));
        }

        if (toCurrency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to_currency", toCurrency));
        }

        if (baseAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base_amount", baseAmount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1RateEstimateValidateBeforeCall(String baseCurrency, String toCurrency, String baseAmount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'baseCurrency' is set
        if (baseCurrency == null) {
            throw new ApiException("Missing the required parameter 'baseCurrency' when calling v1RateEstimate(Async)");
        }
        
        // verify the required parameter 'toCurrency' is set
        if (toCurrency == null) {
            throw new ApiException("Missing the required parameter 'toCurrency' when calling v1RateEstimate(Async)");
        }
        
        // verify the required parameter 'baseAmount' is set
        if (baseAmount == null) {
            throw new ApiException("Missing the required parameter 'baseAmount' when calling v1RateEstimate(Async)");
        }
        

        okhttp3.Call localVarCall = v1RateEstimateCall(baseCurrency, toCurrency, baseAmount, _callback);
        return localVarCall;

    }

    /**
     * Estimate the amount of currency exchange.
     * Estimate the amount of currency exchange.
     * @param baseCurrency Specified the base currency that needs to be estimated (required)
     * @param toCurrency Specify the target currency. (required)
     * @param baseAmount Specify the amount of base currency that need to be estimated. (required)
     * @return ResponseEstimateOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseEstimateOut v1RateEstimate(String baseCurrency, String toCurrency, String baseAmount) throws ApiException {
        ApiResponse<ResponseEstimateOut> localVarResp = v1RateEstimateWithHttpInfo(baseCurrency, toCurrency, baseAmount);
        return localVarResp.getData();
    }

    /**
     * Estimate the amount of currency exchange.
     * Estimate the amount of currency exchange.
     * @param baseCurrency Specified the base currency that needs to be estimated (required)
     * @param toCurrency Specify the target currency. (required)
     * @param baseAmount Specify the amount of base currency that need to be estimated. (required)
     * @return ApiResponse&lt;ResponseEstimateOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseEstimateOut> v1RateEstimateWithHttpInfo(String baseCurrency, String toCurrency, String baseAmount) throws ApiException {
        okhttp3.Call localVarCall = v1RateEstimateValidateBeforeCall(baseCurrency, toCurrency, baseAmount, null);
        Type localVarReturnType = new TypeToken<ResponseEstimateOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Estimate the amount of currency exchange. (asynchronously)
     * Estimate the amount of currency exchange.
     * @param baseCurrency Specified the base currency that needs to be estimated (required)
     * @param toCurrency Specify the target currency. (required)
     * @param baseAmount Specify the amount of base currency that need to be estimated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RateEstimateAsync(String baseCurrency, String toCurrency, String baseAmount, final ApiCallback<ResponseEstimateOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1RateEstimateValidateBeforeCall(baseCurrency, toCurrency, baseAmount, _callback);
        Type localVarReturnType = new TypeToken<ResponseEstimateOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1RateGetRates
     * @param getRatesIn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RateGetRatesCall(GetRatesIn getRatesIn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = getRatesIn;

        // create path and map variables
        String localVarPath = "/api/v1/rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1RateGetRatesValidateBeforeCall(GetRatesIn getRatesIn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getRatesIn' is set
        if (getRatesIn == null) {
            throw new ApiException("Missing the required parameter 'getRatesIn' when calling v1RateGetRates(Async)");
        }
        

        okhttp3.Call localVarCall = v1RateGetRatesCall(getRatesIn, _callback);
        return localVarCall;

    }

    /**
     * Query exchange rates between different currencies. 
     * Query exchange rates between different currencies.
     * @param getRatesIn  (required)
     * @return ResponseRatesOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ResponseRatesOut v1RateGetRates(GetRatesIn getRatesIn) throws ApiException {
        ApiResponse<ResponseRatesOut> localVarResp = v1RateGetRatesWithHttpInfo(getRatesIn);
        return localVarResp.getData();
    }

    /**
     * Query exchange rates between different currencies. 
     * Query exchange rates between different currencies.
     * @param getRatesIn  (required)
     * @return ApiResponse&lt;ResponseRatesOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseRatesOut> v1RateGetRatesWithHttpInfo(GetRatesIn getRatesIn) throws ApiException {
        okhttp3.Call localVarCall = v1RateGetRatesValidateBeforeCall(getRatesIn, null);
        Type localVarReturnType = new TypeToken<ResponseRatesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query exchange rates between different currencies.  (asynchronously)
     * Query exchange rates between different currencies.
     * @param getRatesIn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1RateGetRatesAsync(GetRatesIn getRatesIn, final ApiCallback<ResponseRatesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1RateGetRatesValidateBeforeCall(getRatesIn, _callback);
        Type localVarReturnType = new TypeToken<ResponseRatesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
