/*
 * WalletPay API Documentation
 *
 * This is a custody wallet pay service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Refund struct for Refund
type Refund struct {
	// Amount being refunded
	Amount string `json:"amount"`
	// Time when the refund was completed
	CompletedAt *string `json:"completed_at,omitempty"`
	// Time when the refund was created
	CreatedAt string `json:"created_at"`
	// Currency code of the refund
	Currency string `json:"currency"`
	// Time when the refund failed
	FailedAt *string `json:"failed_at,omitempty"`
	// Error message when refund fails
	FailedMessage *string `json:"failed_message,omitempty"`
	// System unique ID of the refund
	Id string `json:"id"`
	// Refund description from merchant
	Note *string `json:"note,omitempty"`
	// ID of the order being refunded
	OrderId string `json:"order_id"`
	// The status of the refund
	Status string `json:"status"`
	// External ID, the refund ID in the merchant system
	Uid *string `json:"uid,omitempty"`
}

// NewRefund instantiates a new Refund object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefund(amount string, createdAt string, currency string, id string, orderId string, status string) *Refund {
	this := Refund{}
	this.Amount = amount
	this.CreatedAt = createdAt
	this.Currency = currency
	this.Id = id
	this.OrderId = orderId
	this.Status = status
	return &this
}

// NewRefundWithDefaults instantiates a new Refund object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefundWithDefaults() *Refund {
	this := Refund{}
	return &this
}

// GetAmount returns the Amount field value
func (o *Refund) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Refund) GetAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Refund) SetAmount(v string) {
	o.Amount = v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *Refund) GetCompletedAt() string {
	if o == nil || o.CompletedAt == nil {
		var ret string
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetCompletedAtOk() (*string, bool) {
	if o == nil || o.CompletedAt == nil {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *Refund) HasCompletedAt() bool {
	if o != nil && o.CompletedAt != nil {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given string and assigns it to the CompletedAt field.
func (o *Refund) SetCompletedAt(v string) {
	o.CompletedAt = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Refund) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Refund) GetCreatedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Refund) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCurrency returns the Currency field value
func (o *Refund) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Refund) GetCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Refund) SetCurrency(v string) {
	o.Currency = v
}

// GetFailedAt returns the FailedAt field value if set, zero value otherwise.
func (o *Refund) GetFailedAt() string {
	if o == nil || o.FailedAt == nil {
		var ret string
		return ret
	}
	return *o.FailedAt
}

// GetFailedAtOk returns a tuple with the FailedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetFailedAtOk() (*string, bool) {
	if o == nil || o.FailedAt == nil {
		return nil, false
	}
	return o.FailedAt, true
}

// HasFailedAt returns a boolean if a field has been set.
func (o *Refund) HasFailedAt() bool {
	if o != nil && o.FailedAt != nil {
		return true
	}

	return false
}

// SetFailedAt gets a reference to the given string and assigns it to the FailedAt field.
func (o *Refund) SetFailedAt(v string) {
	o.FailedAt = &v
}

// GetFailedMessage returns the FailedMessage field value if set, zero value otherwise.
func (o *Refund) GetFailedMessage() string {
	if o == nil || o.FailedMessage == nil {
		var ret string
		return ret
	}
	return *o.FailedMessage
}

// GetFailedMessageOk returns a tuple with the FailedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetFailedMessageOk() (*string, bool) {
	if o == nil || o.FailedMessage == nil {
		return nil, false
	}
	return o.FailedMessage, true
}

// HasFailedMessage returns a boolean if a field has been set.
func (o *Refund) HasFailedMessage() bool {
	if o != nil && o.FailedMessage != nil {
		return true
	}

	return false
}

// SetFailedMessage gets a reference to the given string and assigns it to the FailedMessage field.
func (o *Refund) SetFailedMessage(v string) {
	o.FailedMessage = &v
}

// GetId returns the Id field value
func (o *Refund) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Refund) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Refund) SetId(v string) {
	o.Id = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *Refund) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *Refund) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *Refund) SetNote(v string) {
	o.Note = &v
}

// GetOrderId returns the OrderId field value
func (o *Refund) GetOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *Refund) GetOrderIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *Refund) SetOrderId(v string) {
	o.OrderId = v
}

// GetStatus returns the Status field value
func (o *Refund) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Refund) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Refund) SetStatus(v string) {
	o.Status = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *Refund) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Refund) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *Refund) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *Refund) SetUid(v string) {
	o.Uid = &v
}

func (o Refund) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if o.CompletedAt != nil {
		toSerialize["completed_at"] = o.CompletedAt
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if o.FailedAt != nil {
		toSerialize["failed_at"] = o.FailedAt
	}
	if o.FailedMessage != nil {
		toSerialize["failed_message"] = o.FailedMessage
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if true {
		toSerialize["order_id"] = o.OrderId
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	return json.Marshal(toSerialize)
}

type NullableRefund struct {
	value *Refund
	isSet bool
}

func (v NullableRefund) Get() *Refund {
	return v.value
}

func (v *NullableRefund) Set(val *Refund) {
	v.value = val
	v.isSet = true
}

func (v NullableRefund) IsSet() bool {
	return v.isSet
}

func (v *NullableRefund) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefund(val *Refund) *NullableRefund {
	return &NullableRefund{value: val, isSet: true}
}

func (v NullableRefund) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefund) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


