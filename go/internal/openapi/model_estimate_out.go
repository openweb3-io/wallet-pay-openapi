/*
 * Wallet-Pay API Documentations
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EstimateOut struct for EstimateOut
type EstimateOut struct {
	// The base currency.
	From string `json:"from"`
	// The base currency amount.
	BaseAmount string `json:"base_amount"`
	// The target currency
	ToCurrency string `json:"to_currency"`
	// The estimated amount in the target currency
	ToAmount string `json:"to_amount"`
	// The conversion rate from the base currency to the target currency.
	Rate float32 `json:"rate"`
}

// NewEstimateOut instantiates a new EstimateOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEstimateOut(from string, baseAmount string, toCurrency string, toAmount string, rate float32) *EstimateOut {
	this := EstimateOut{}
	this.From = from
	this.BaseAmount = baseAmount
	this.ToCurrency = toCurrency
	this.ToAmount = toAmount
	this.Rate = rate
	return &this
}

// NewEstimateOutWithDefaults instantiates a new EstimateOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEstimateOutWithDefaults() *EstimateOut {
	this := EstimateOut{}
	return &this
}

// GetFrom returns the From field value
func (o *EstimateOut) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *EstimateOut) GetFromOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *EstimateOut) SetFrom(v string) {
	o.From = v
}

// GetBaseAmount returns the BaseAmount field value
func (o *EstimateOut) GetBaseAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value
// and a boolean to check if the value has been set.
func (o *EstimateOut) GetBaseAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BaseAmount, true
}

// SetBaseAmount sets field value
func (o *EstimateOut) SetBaseAmount(v string) {
	o.BaseAmount = v
}

// GetToCurrency returns the ToCurrency field value
func (o *EstimateOut) GetToCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToCurrency
}

// GetToCurrencyOk returns a tuple with the ToCurrency field value
// and a boolean to check if the value has been set.
func (o *EstimateOut) GetToCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToCurrency, true
}

// SetToCurrency sets field value
func (o *EstimateOut) SetToCurrency(v string) {
	o.ToCurrency = v
}

// GetToAmount returns the ToAmount field value
func (o *EstimateOut) GetToAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToAmount
}

// GetToAmountOk returns a tuple with the ToAmount field value
// and a boolean to check if the value has been set.
func (o *EstimateOut) GetToAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToAmount, true
}

// SetToAmount sets field value
func (o *EstimateOut) SetToAmount(v string) {
	o.ToAmount = v
}

// GetRate returns the Rate field value
func (o *EstimateOut) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *EstimateOut) GetRateOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *EstimateOut) SetRate(v float32) {
	o.Rate = v
}

func (o EstimateOut) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["base_amount"] = o.BaseAmount
	}
	if true {
		toSerialize["to_currency"] = o.ToCurrency
	}
	if true {
		toSerialize["to_amount"] = o.ToAmount
	}
	if true {
		toSerialize["rate"] = o.Rate
	}
	return json.Marshal(toSerialize)
}

type NullableEstimateOut struct {
	value *EstimateOut
	isSet bool
}

func (v NullableEstimateOut) Get() *EstimateOut {
	return v.value
}

func (v *NullableEstimateOut) Set(val *EstimateOut) {
	v.value = val
	v.isSet = true
}

func (v NullableEstimateOut) IsSet() bool {
	return v.isSet
}

func (v *NullableEstimateOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEstimateOut(val *EstimateOut) *NullableEstimateOut {
	return &NullableEstimateOut{value: val, isSet: true}
}

func (v NullableEstimateOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEstimateOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


