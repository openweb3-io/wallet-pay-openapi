/*
 * Wallet-Pay API Documentations
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WebhookMessage The request body of the webhook POST request.
type WebhookMessage struct {
	// Message event type
	EventType *string `json:"event_type,omitempty"`
	// Message content
	Payload map[string]interface{} `json:"payload,omitempty"`
}

// NewWebhookMessage instantiates a new WebhookMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookMessage() *WebhookMessage {
	this := WebhookMessage{}
	return &this
}

// NewWebhookMessageWithDefaults instantiates a new WebhookMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookMessageWithDefaults() *WebhookMessage {
	this := WebhookMessage{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *WebhookMessage) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookMessage) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *WebhookMessage) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *WebhookMessage) SetEventType(v string) {
	o.EventType = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WebhookMessage) GetPayload() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WebhookMessage) GetPayloadOk() (*map[string]interface{}, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return &o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *WebhookMessage) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given map[string]interface{} and assigns it to the Payload field.
func (o *WebhookMessage) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

func (o WebhookMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventType != nil {
		toSerialize["event_type"] = o.EventType
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	return json.Marshal(toSerialize)
}

type NullableWebhookMessage struct {
	value *WebhookMessage
	isSet bool
}

func (v NullableWebhookMessage) Get() *WebhookMessage {
	return v.value
}

func (v *NullableWebhookMessage) Set(val *WebhookMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookMessage(val *WebhookMessage) *NullableWebhookMessage {
	return &NullableWebhookMessage{value: val, isSet: true}
}

func (v NullableWebhookMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


