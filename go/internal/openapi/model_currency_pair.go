/*
 * WalletPay API Documentation
 *
 * This is a custody wallet pay service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CurrencyPair Currency pair for this rate
type CurrencyPair struct {
	// Source currency code
	BaseCurrency string `json:"base_currency"`
	// Target currency code
	ToCurrency string `json:"to_currency"`
}

// NewCurrencyPair instantiates a new CurrencyPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyPair(baseCurrency string, toCurrency string) *CurrencyPair {
	this := CurrencyPair{}
	this.BaseCurrency = baseCurrency
	this.ToCurrency = toCurrency
	return &this
}

// NewCurrencyPairWithDefaults instantiates a new CurrencyPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyPairWithDefaults() *CurrencyPair {
	this := CurrencyPair{}
	return &this
}

// GetBaseCurrency returns the BaseCurrency field value
func (o *CurrencyPair) GetBaseCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseCurrency
}

// GetBaseCurrencyOk returns a tuple with the BaseCurrency field value
// and a boolean to check if the value has been set.
func (o *CurrencyPair) GetBaseCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BaseCurrency, true
}

// SetBaseCurrency sets field value
func (o *CurrencyPair) SetBaseCurrency(v string) {
	o.BaseCurrency = v
}

// GetToCurrency returns the ToCurrency field value
func (o *CurrencyPair) GetToCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToCurrency
}

// GetToCurrencyOk returns a tuple with the ToCurrency field value
// and a boolean to check if the value has been set.
func (o *CurrencyPair) GetToCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToCurrency, true
}

// SetToCurrency sets field value
func (o *CurrencyPair) SetToCurrency(v string) {
	o.ToCurrency = v
}

func (o CurrencyPair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["base_currency"] = o.BaseCurrency
	}
	if true {
		toSerialize["to_currency"] = o.ToCurrency
	}
	return json.Marshal(toSerialize)
}

type NullableCurrencyPair struct {
	value *CurrencyPair
	isSet bool
}

func (v NullableCurrencyPair) Get() *CurrencyPair {
	return v.value
}

func (v *NullableCurrencyPair) Set(val *CurrencyPair) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyPair) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyPair(val *CurrencyPair) *NullableCurrencyPair {
	return &NullableCurrencyPair{value: val, isSet: true}
}

func (v NullableCurrencyPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


