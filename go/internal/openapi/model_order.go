/*
 * WalletPay API Documentation
 *
 * This is a custody wallet pay service openapi server.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Order struct for Order
type Order struct {
	// Amount
	Amount string `json:"amount"`
	// Order creation time
	CreatedAt string `json:"created_at"`
	// Currency symbol
	Currency string `json:"currency"`
	// Expiration time in seconds. If payment is not completed within the given time, the order will be automatically canceled
	Expiration int32 `json:"expiration"`
	// Order expiration time
	ExpiredAt *string `json:"expired_at,omitempty"`
	// Order failure time
	FailedAt *string `json:"failed_at,omitempty"`
	// Error message when order fails
	FailedMessage *string `json:"failed_message,omitempty"`
	// System unique ID of the order
	Id string `json:"id"`
	// Order metadata
	Metadata map[string]string `json:"metadata,omitempty"`
	// Order description from merchant
	Note string `json:"note"`
	// Order payment time
	PaidAt *string `json:"paid_at,omitempty"`
	// Order status enum
	Status string `json:"status"`
	// External ID, the order ID in the merchant system
	Uid *string `json:"uid,omitempty"`
	// ID of the user who made the payment
	UserId *string `json:"user_id,omitempty"`
	// ID of the wallet used for payment
	WalletId string `json:"wallet_id"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder(amount string, createdAt string, currency string, expiration int32, id string, note string, status string, walletId string) *Order {
	this := Order{}
	this.Amount = amount
	this.CreatedAt = createdAt
	this.Currency = currency
	this.Expiration = expiration
	this.Id = id
	this.Note = note
	this.Status = status
	this.WalletId = walletId
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetAmount returns the Amount field value
func (o *Order) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Order) GetAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Order) SetAmount(v string) {
	o.Amount = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Order) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Order) GetCreatedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Order) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCurrency returns the Currency field value
func (o *Order) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *Order) GetCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *Order) SetCurrency(v string) {
	o.Currency = v
}

// GetExpiration returns the Expiration field value
func (o *Order) GetExpiration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value
// and a boolean to check if the value has been set.
func (o *Order) GetExpirationOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Expiration, true
}

// SetExpiration sets field value
func (o *Order) SetExpiration(v int32) {
	o.Expiration = v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *Order) GetExpiredAt() string {
	if o == nil || o.ExpiredAt == nil {
		var ret string
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExpiredAtOk() (*string, bool) {
	if o == nil || o.ExpiredAt == nil {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *Order) HasExpiredAt() bool {
	if o != nil && o.ExpiredAt != nil {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given string and assigns it to the ExpiredAt field.
func (o *Order) SetExpiredAt(v string) {
	o.ExpiredAt = &v
}

// GetFailedAt returns the FailedAt field value if set, zero value otherwise.
func (o *Order) GetFailedAt() string {
	if o == nil || o.FailedAt == nil {
		var ret string
		return ret
	}
	return *o.FailedAt
}

// GetFailedAtOk returns a tuple with the FailedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFailedAtOk() (*string, bool) {
	if o == nil || o.FailedAt == nil {
		return nil, false
	}
	return o.FailedAt, true
}

// HasFailedAt returns a boolean if a field has been set.
func (o *Order) HasFailedAt() bool {
	if o != nil && o.FailedAt != nil {
		return true
	}

	return false
}

// SetFailedAt gets a reference to the given string and assigns it to the FailedAt field.
func (o *Order) SetFailedAt(v string) {
	o.FailedAt = &v
}

// GetFailedMessage returns the FailedMessage field value if set, zero value otherwise.
func (o *Order) GetFailedMessage() string {
	if o == nil || o.FailedMessage == nil {
		var ret string
		return ret
	}
	return *o.FailedMessage
}

// GetFailedMessageOk returns a tuple with the FailedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetFailedMessageOk() (*string, bool) {
	if o == nil || o.FailedMessage == nil {
		return nil, false
	}
	return o.FailedMessage, true
}

// HasFailedMessage returns a boolean if a field has been set.
func (o *Order) HasFailedMessage() bool {
	if o != nil && o.FailedMessage != nil {
		return true
	}

	return false
}

// SetFailedMessage gets a reference to the given string and assigns it to the FailedMessage field.
func (o *Order) SetFailedMessage(v string) {
	o.FailedMessage = &v
}

// GetId returns the Id field value
func (o *Order) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Order) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Order) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Order) GetMetadata() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Order) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Order) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Order) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetNote returns the Note field value
func (o *Order) GetNote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Note
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
func (o *Order) GetNoteOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Note, true
}

// SetNote sets field value
func (o *Order) SetNote(v string) {
	o.Note = v
}

// GetPaidAt returns the PaidAt field value if set, zero value otherwise.
func (o *Order) GetPaidAt() string {
	if o == nil || o.PaidAt == nil {
		var ret string
		return ret
	}
	return *o.PaidAt
}

// GetPaidAtOk returns a tuple with the PaidAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPaidAtOk() (*string, bool) {
	if o == nil || o.PaidAt == nil {
		return nil, false
	}
	return o.PaidAt, true
}

// HasPaidAt returns a boolean if a field has been set.
func (o *Order) HasPaidAt() bool {
	if o != nil && o.PaidAt != nil {
		return true
	}

	return false
}

// SetPaidAt gets a reference to the given string and assigns it to the PaidAt field.
func (o *Order) SetPaidAt(v string) {
	o.PaidAt = &v
}

// GetStatus returns the Status field value
func (o *Order) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Order) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Order) SetStatus(v string) {
	o.Status = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *Order) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *Order) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *Order) SetUid(v string) {
	o.Uid = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Order) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Order) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Order) SetUserId(v string) {
	o.UserId = &v
}

// GetWalletId returns the WalletId field value
func (o *Order) GetWalletId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WalletId
}

// GetWalletIdOk returns a tuple with the WalletId field value
// and a boolean to check if the value has been set.
func (o *Order) GetWalletIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WalletId, true
}

// SetWalletId sets field value
func (o *Order) SetWalletId(v string) {
	o.WalletId = v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if true {
		toSerialize["expiration"] = o.Expiration
	}
	if o.ExpiredAt != nil {
		toSerialize["expired_at"] = o.ExpiredAt
	}
	if o.FailedAt != nil {
		toSerialize["failed_at"] = o.FailedAt
	}
	if o.FailedMessage != nil {
		toSerialize["failed_message"] = o.FailedMessage
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["note"] = o.Note
	}
	if o.PaidAt != nil {
		toSerialize["paid_at"] = o.PaidAt
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if true {
		toSerialize["wallet_id"] = o.WalletId
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


