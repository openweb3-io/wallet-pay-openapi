/*
 * Wallet-Pay API Documentations
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResponseRefundOut struct for ResponseRefundOut
type ResponseRefundOut struct {
	Data RefundOut `json:"data"`
}

// NewResponseRefundOut instantiates a new ResponseRefundOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseRefundOut(data RefundOut) *ResponseRefundOut {
	this := ResponseRefundOut{}
	this.Data = data
	return &this
}

// NewResponseRefundOutWithDefaults instantiates a new ResponseRefundOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseRefundOutWithDefaults() *ResponseRefundOut {
	this := ResponseRefundOut{}
	return &this
}

// GetData returns the Data field value
func (o *ResponseRefundOut) GetData() RefundOut {
	if o == nil {
		var ret RefundOut
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ResponseRefundOut) GetDataOk() (*RefundOut, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ResponseRefundOut) SetData(v RefundOut) {
	o.Data = v
}

func (o ResponseRefundOut) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableResponseRefundOut struct {
	value *ResponseRefundOut
	isSet bool
}

func (v NullableResponseRefundOut) Get() *ResponseRefundOut {
	return v.value
}

func (v *NullableResponseRefundOut) Set(val *ResponseRefundOut) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseRefundOut) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseRefundOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseRefundOut(val *ResponseRefundOut) *NullableResponseRefundOut {
	return &NullableResponseRefundOut{value: val, isSet: true}
}

func (v NullableResponseRefundOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseRefundOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


